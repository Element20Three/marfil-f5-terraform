#!/usr/bin/env python
import boto3
import sys
import os
student_email = os.getenv('emailid')
student_id = student_email.replace('@','')
student_id = student_id.replace('.','')

ec2 = boto3.resource('ec2')
elb = boto3.client('elb')
elbs = elb.describe_load_balancers(LoadBalancerNames=['waf-%s' %(student_id)])
instances = ec2.instances.filter(
    Filters=[{'Name': 'instance-state-name', 'Values': ['running']},
             {'Name':'key-name','Values':['MyKeyPair-%s*' %(student_email)]}
         ]
)

print "WAF ELB"
print "  URL: https://%s" %(elbs['LoadBalancerDescriptions'][0]['CanonicalHostedZoneName'])
print "\n"
for instance in instances:
    if instance.tags:
        nametag =  filter(lambda tag: tag['Key'] == 'Name',instance.tags)
        if nametag:
            instance_name = nametag[0]['Value']
    print instance_name
    if 'web-az' not in instance_name:
        print "  MGMT IP:\t%s" %(instance.public_ip_address)
    else:
        print "  PRIVATE IP:\t%s" %(instance.private_ip_address)
    if 'ha-%s' %(student_id) in instance_name:
        eth1 = filter(lambda a: a.attachment['DeviceIndex'] == 1, instance.network_interfaces)[0]
        vip_addr =  eth1.private_ip_addresses[1]['PrivateIpAddress']
        print "  VIP IP:\t%s" %(vip_addr)
        if 'Association' in eth1.private_ip_addresses[1]:
            print "  Elastic IP:\t%s" %(eth1.private_ip_addresses[1]['Association']['PublicIp'])

    print "\n"
